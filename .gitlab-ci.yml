image: $HELM_REGISTRY_IMAGE:$HELM_REGISTRY_VERSION

variables:
  REGISTRY: quay.io
  REGISTRY_USER: your_org # we set this to override to samsung_cnct in gitlab Group Variables
  CHART_NAME: logging
  ROBOT_ACCOUNT: logging_rw
  HELM_REGISTRY_IMAGE: quay.io/samsung_cnct/helm-registry-agent
  HELM_REGISTRY_VERSION: v0.7.4-helm_2.6
  KUBECTL_IMAGE: quay.io/samsung_cnct/kraken-tools:latest
# Create a Gitlab Secret Variable called REGISTRY_PASSWORD and assign it the value of the registry robot docker login password.
# DO NOT PASTE THIS PASSWORD HERE
  DEPLOY_KUBECONFIG: ${CI_PROJECT_DIR}/deploy/kube.config
  DEPLOY_VALUES: ${CI_PROJECT_DIR}/deploy/helm-${CHART_NAME}-values.yaml
  TILLER_NAMESPACE: kraken
  CI_DEBUG_TRACE: "true"

.auto_devops: &auto_devops |
  delete_ns() {
    local counter kubecmd

    kubecmd="delete"
    soft_thresh=3
    hard_thresh=5
    counter=0

    while kubectl ns | grep -cP $NAMESPACE; do
      ((count++))

      if [[ $count -le $soft_thresh ]]; then
        kubectl $kubecmd ns $NAMESPACE
      fi

      if [[ $count -gt 1 && $count -le $soft_thresh ]]; then
        echo >&2 "Attempt($count/$soft_thresh) k8s namespace deletion failed"
      elsif [[ $count -gt 1 && $count -gt $soft_thresh && $count -le $hard_thresh ]]
        echo >&2 "Attempt($count/$soft_thresh) k8s namespace deletion failed...trying forced"
        kubecmd="delete --force"
      elsif [[ $count -gt 1 && $count -gt $hard_thresh ]]
        echo >&2 "Attempt($count > $hard_thresh) k8s namespace deletion failed too many times."
        return 100
      fi
    done

    kubectl $kubecmd namespace $NAMESPACE
  }

before_script:
  - *auto_devops
  - helm registry login -u ${REGISTRY_USER}+${ROBOT_ACCOUNT} -p ${REGISTRY_PASSWORD} ${REGISTRY}

stages:
  - build
  - dependency
  - config
  - validate
  - test_prep
  - test
  - clean
  - publish
  - deploy

build_chart:
  stage: build
  only:
    - tags
    - branches
  artifacts:
    paths:
      - ${CHART_NAME}
  script:
    - build/build.sh

fetch_deps:
  stage: dependency
  only:
    - tags
    - branches
  artifacts:
    paths:
      - ${CHART_NAME}
  script:
   - build/dependency_mgmt.sh

.config_artifacts_template:
  artifacts: &config_artifacts
    paths:
      - ${DEPLOY_KUBECONFIG}
      - ${DEPLOY_VALUES}
    expire_in: 14 days

generate-staging-config:
  stage: config
  only:
    - branches
  artifacts: *config_artifacts
  script:
    - mkdir ${CI_PROJECT_DIR}/deploy
    - echo ${STAGING_KUBECONFIG} | base64 -d > ${DEPLOY_KUBECONFIG}
    - helm init --client-only
    - echo ${STAGING_VALUES} | base64 -d > ${DEPLOY_VALUES}

generate-production-config:
  stage: config
  only:
    - /v[0-9]+\.[0-9]+\.[0-9]+/
  artifacts: *config_artifacts
  script:
    - mkdir ${CI_PROJECT_DIR}/deploy
    - echo ${PRODUCTION_KUBECONFIG} | base64 -d > ${DEPLOY_KUBECONFIG}
    - helm init --client-only
    - echo ${PRODUCTION_VALUES} | base64 -d > ${DEPLOY_VALUES}

validate-config:
  image: $KUBECTL_IMAGE
  stage: validate
  only:
    - master
    - /v[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - test -s ${DEPLOY_KUBECONFIG}
    - kubectl --kubeconfig ${DEPLOY_KUBECONFIG} config view || exit $?
    - test -f ${DEPLOY_VALUES}

namespace_create:
  only:
    - branches
  image: $KUBECTL_IMAGE
  stage: test_prep
  variables:
    NAMESPACE: ${CHART_NAME}-${CI_PIPELINE_ID}-test
  before_script:
    - mkdir /root/.kube
    - cp ${DEPLOY_KUBECONFIG} /root/.kube/config
  script:
    - kubectl create namespace $NAMESPACE

helm_test:
  only:
    - branches
  stage: test
  variables:
    NAMESPACE: ${CHART_NAME}-${CI_PIPELINE_ID}-test
    RELEASE: ${CHART_NAME}-test-${CI_PIPELINE_ID}
  before_script:
    - mkdir /root/.kube
    - echo ${TEST_KUBECONFIG} | base64 -d > /root/.kube/config
    - helm init
  script:
    - build/test.sh

clean_test:
  only:
    - branches
  image: $KUBECTL_IMAGE
  stage: clean
  allow_failure: false
  when: always
  variables:
    NAMESPACE: ${CHART_NAME}-${CI_PIPELINE_ID}-test
    RELEASE: ${CHART_NAME}-test-${CI_PIPELINE_ID}
  before_script:
    - mkdir /root/.kube
    - echo ${TEST_KUBECONFIG} | base64 -d > /root/.kube/config
    - helm init
  script:
    - build/clean.sh
  after_script:
    - delete_ns

helm_publish_alpha:
  stage: publish
  only:
    - master
  script:
    - cd ${CHART_NAME} && helm registry push ${REGISTRY}/${REGISTRY_USER}/${CHART_NAME} -c alpha

helm_publish_tag:
  stage: publish
  only:
    - /v[0-9]+\.[0-9]+(\.[0-9]+[a-z]?)?/
  script:
    - cd ${CHART_NAME} && helm registry push ${REGISTRY}/${REGISTRY_USER}/${CHART_NAME} -c stable

deploy-alpha-staging:
  stage: deploy
  only:
    - master
  variables:
    NAMESPACE: ${CHART_NAME}-staging
  before_script:
    - mkdir /root/.kube
    - cp ${DEPLOY_KUBECONFIG} /root/.kube/config
  script:
    - cd ${CHART_NAME}
    - helm registry upgrade ${REGISTRY}/${REGISTRY_USER}/${CHART_NAME}:alpha -- ${NAMESPACE}
      --install --namespace ${NAMESPACE} --values ${DEPLOY_VALUES}

deploy-stable-production:
  stage: deploy
  only:
    - /v[0-9]+\.[0-9]+\.[0-9]+/
  variables:
    NAMESPACE: ${CHART_NAME}
  before_script:
    - mkdir /root/.kube
    - cp ${DEPLOY_KUBECONFIG} /root/.kube/config
  script:
    - cd ${CHART_NAME}
    - helm registry upgrade ${REGISTRY}/${REGISTRY_USER}/${CHART_NAME}:stable -- ${NAMESPACE}
      --install --tiller-namespace ${TILLER_NAMESPACE} --namespace ${NAMESPACE}
      --values ${DEPLOY_VALUES}
